How did viewing a diff between two versions of a file help you see the bug that was introduced?

	It was obvious that it shows the differenes between the 2 files. From there, I can find where I may have made a typo or done some wrong logic.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

	It would be much easier to go back to a working version than trying to fix a bug that was introduced. It could also be that if you were heading down the wrong path, you could instantly go back to where you want to be.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

	Manually committing yourself makes it better for the user because how the user checkpoints is more likely how he wants to go back and solve any issues. It also lets you logically commit certain tasks that may make more sense logically. Doing it manually will also take less space as Google Docs might save more versions than a user would want. The downside of this is the user may become forgetful and do a big commit some time..

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

	To make sure that the projects files are all up to date.

How can you use the commands git log and git diff to view the history of files?

	by going into their directory and then using git log to see the log of commits and then using git diff (commit ID #1) (commit ID#2)

How might using version control make you more confident to make changes that could break something?

	By having the ability to always rewind my mistakes, I would be more willing to try new things and implement difficult tasks while knowing I could always go back.

Now that you have your workspace set up, what do you want to try using Git for?

	To keep version control of my future projects!